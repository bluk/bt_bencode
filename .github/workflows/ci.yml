name: Rust Stable CI

on:
  push:

  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Rust Version
        run: rustc --version
      - name: Run cargo build (--all-features)
        run: cargo build --all-features --release
      - name: Run cargo build (--features alloc)
        run: cargo build --no-default-features --release --features alloc
      - name: Run cargo build (--features std)
        run: cargo test --no-default-features --release --features std
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Rust Version
        run: rustc --version
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: Run cargo check (--all-features)
        run: cargo check --all-features
      - name: Run cargo test (default)
        run: cargo test
      - name: Run cargo test (--all-features)
        run: cargo test --all-features
      - name: Run cargo test (--features alloc)
        run: cargo test --no-default-features --features alloc
      - name: Run cargo test (--features std)
        run: cargo test --no-default-features --features std
  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Rust Version
        run: rustc --version
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install clippy
        run: rustup component add clippy
      # - name: Run cargo clippy
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: clippy
      #     args: -- -D warningsadd clippy
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
